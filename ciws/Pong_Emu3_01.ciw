//   Copyright (C) 2022 Thomas DiModica <ricinwich@yahoo.com>
//
//   This program is free software: you can redistribute it and/or modify
//   it under the terms of the GNU General Public License as published by
//   the Free Software Foundation, either version 3 of the License, or
//   (at your option) any later version.
//
//   This program is distributed in the hope that it will be useful,
//   but WITHOUT ANY WARRANTY; without even the implied warranty of
//   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//   GNU General Public License for more details.
//
//   You should have received a copy of the GNU General Public License
//   along with this program.  If not, see <http://www.gnu.org/licenses/>.

// Compile this with the alternative ciw compiler.
dim rand; lpad; rpad; xloc; yloc; xvel; yvel; lread; rread; reset; @40960 screen [2048]; @45312 counter

function multiply(sum; lhs; rhs)
   if rhs then
      if rhs & 1 then
         sum := sum + lhs
      fi
      tailcall sum; lhs << 1; rhs >>> 1
   fi
   return sum
end function

function setPalette()
   // Set the VRAM Bank to Palette
   asm "        LDI $B00"
   asm "        LDI 4"
   asm "        SHL 1, 0"
   asm "        LDI 5"
   asm "        OR  1, 0"
   asm "        LDI 224"
   asm "        STB 0, 1"
   // Colors: (black), red, green, blue, white
   screen[2] := 255
   screen[3] := 65280
   screen[4] := 65280
   screen[5] := 65280
   screen[7] := 65536
   screen[8] := 65536
   screen[9] := 65536
   return
end function

function drawBall()
      // Set the VRAM Bank to Sprite Tiles
   asm "        LDI $B00"
   asm "        LDI 4"
   asm "        SHL 1, 0"
   asm "        LDI 5"
   asm "        OR  1, 0"
   asm "        LDI 128"
   asm "        STB 0, 1"
      // Draw ball
   screen[32 +  2] := 2 * 256
   screen[32 +  3] := 2 + 2 * 256
   screen[32 +  6] := 2
   screen[32 +  9] := 2 + 2 * 256
   screen[32 + 13] := 2
   screen[32 + 16] := 2 * 256
   screen[32 + 20] := 2
   screen[32 + 24] := 2
   screen[32 + 28] := 2
      // Set the VRAM Bank to Sprite Data
   asm "        LDI $B00"
   asm "        LDI 4"
   asm "        SHL 1, 0"
   asm "        LDI 5"
   asm "        OR  1, 0"
   asm "        LDI 252"
   asm "        STB 0, 1"
   screen[ 4 + 0] := xloc
   screen[ 4 + 1] := yloc
   screen[ 4 + 2] := 1
   screen[ 4 + 3] := 192
   screen[ 8 + 0] := xloc + 8
   screen[ 8 + 1] := yloc
   screen[ 8 + 2] := 1
   screen[ 8 + 3] := 448
   screen[12 + 0] := xloc
   screen[12 + 1] := yloc + 8
   screen[12 + 2] := 1
   screen[12 + 3] := 704
   screen[16 + 0] := xloc + 8
   screen[16 + 1] := yloc + 8
   screen[16 + 2] := 1
   screen[16 + 3] := 960
   return
end function

function updateBall()
   xloc := xloc + xvel
   if (xloc = 0) || (xloc = 624) then
      xvel := -xvel
   fi
   yloc := yloc + yvel
   if (yloc = 0) || (yloc = 464) then
      yvel := -yvel
   fi
   screen[ 4 + 0] := xloc
   screen[ 4 + 1] := yloc
   screen[ 8 + 0] := xloc + 8
   screen[ 8 + 1] := yloc
   screen[12 + 0] := xloc
   screen[12 + 1] := yloc + 8
   screen[16 + 0] := xloc + 8
   screen[16 + 1] := yloc + 8
   return
end function

function busyWait(target)
   if target # (counter & 255) then
      return
   fi
   //call checkInput()
   tailcall target
end function

function mainLoop()
   call busyWait(counter & 255)

   call updateBall()

   if reset then
      return
   fi
   tailcall
end function

function program ()
   rand := rand + 151
   lpad := 208
   rpad := 208
   xloc := 312
   yloc := (((rand >> 4) & 15) << 4) + 120
   call setPalette()
   call drawBall()
   if rand & 16 then
      xvel := 2
   else
      xvel := -2
   fi
   if rand & 32 then
      yvel := 2
   else
      yvel := -2
   fi
   reset := 0

   call mainLoop()
   tailcall
end function
