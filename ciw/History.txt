I think the history probably starts with Radical Dreamers: Le Tresor Interdit. In July of 2007, before I began college, I wrote a script interpreter for the text dump of the English fan translation of Radical Dreamers by Demiforce. It wasn't the best: it was quite bad. But it did give me the confidence that I could interpret a particularly complex script file and execute it.

The first DUMBBASIC I have goes back to February 2008, and was probably written before then, but not too long: December of 2007 at earliest. That would be after my first semester of college. DB is a DUMB language: it parses everything with regular expressions. And the language is limited in that it has to be parse-able with regular expressions. I worked with it until DB 11, whose last modification was August 2009. So, just before my Junior year in college and before I had taken a class on compilers. Though, DB 10's timestamps are from January: I wasn't doing much work on it.

DB 12 has every indication of being completed around December 2011. I had just finished college (for my final semester, I had a choice: take another full schedule and graduate on time, or take two half-semesters and go to classes I wanted to take). Also note that, in the dark of Winter I have a habit of filling my time with hobby programming. Anyway, DB 12 used the compiler infrastructure of my compiler course to compile DB to a byte code. The first thing I did with the "compiler" I build for my Compiler class was make the data type an arbitrary-precision integer. In DB 12, I changed the language from a Pascal-derivative to a BASIC-derivative and added single-dimensional arrays.

At some point in 2012, I decided to rewrite the parser in C and generate code for a "realistic" virtual machine. Out of that came "ifwhile": the main constructs of the language were "if" and "while". I appear to have been done with that by April. Next comes DB 13, which I'm not sure if it actually was written. Looking at what I have, I don't think I wrote it. I have design stuff from July 2012, but no code. In September, I got my first programming job, so maybe that killed it. Fast-forward to October of 2013: I designed a successor to "ifwhile" called "callifwhile" (because there were always calls). If I recall correctly, my intention in creating the original "callifwhile" was to create a language simple enough to do real code generation for the 8080 (I had already written an 8080 emulator). So, remove everything that my virtual machine could do that an 8080 couldn't, and add some operations that the 8080 could support for flavor.

The "callifwhile" concept became, by January of 2014, DB 14. DB 14 had three types: strings, arbitrary-precision floating-point numbers, and arrays. It un-stupid-ed functions, which was a design goal of DB 13. The DB 14 code is, basically, the foundation of the Assembler and the current "callifwhile".

Later in 2014, I bought my first house, and there's a gap there in programming productivity. By August, I was working on attempts to demonstrate that I had learned enough, on my own, to write a simple scripting language interpreter for a program I maintained at work. In May of 2015, I finished "the demonstrator", which was obviously based on an improved DB 14 from March 2014. It demonstrated a scripting language that we could use at work (simple enough to re-implement by hand, and it didn't add new library dependencies to the code base, which Python or Lua would have).

Needless to say, "the demonstrator" went nowhere. But, the code to "the demonstrator" and the original DB 14 were what I cannibalized to make the assembler and my new "callifwhile", which is closer to the old "ifwhile" then it is to the old "callifwhile".
